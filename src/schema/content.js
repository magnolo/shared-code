import mongoose, { Schema } from 'mongoose';
import { createHashSlug } from './../utilities';

const ContentSchema = new Schema(
  {
    versioning: {
      source_id: {
        type: String,
        index: true
      },
      version_parent_id: {
        type: String
      },
      version_child_id: {
        type: String
      },
      latest: {
        type: Boolean,
        index: true
      },
      autoGenerated: {
        type: Boolean
      }
    },
    slug: {
      type: String,
      index: true,
      unique: true
    },
    name: {
      type: String
    },
    description: {
      type: String
    },
    subTitle: {
      type: String
    },
    fileName: {
      type: String
    },
    isPublic: {
      type: Boolean,
      default: false,
      index: true
    },
    //acess replaces isbulic!
    access: { type: String, index: true },
    //classifications: {},
    //created of what?
    parentId: {
      type: String,
      ref: 'Content',
      default: null
    },
    //owner
    userId: {
      type: String,
      index: true,
      required: true,
      ref: 'UserModel'
    },
    //owner of the data used for the visual
    dataSetOwnerId: {
      type: String,
      index: true,
      ref: 'UserModel',
      default: null
    },
    dataSetSlug: {
      type: String,
      index: true,
      default: null
    },
    //userinfo for search indexing
    userInfo: {
      type: {
        name: { type: String },
        //TODO remove from definition
        email: { type: String },
        logo: { type: String },
        slug: { type: String, index: true },
        verifiedDataProvider: { type: Boolean }
      }
    },
    // type of the content
    type: {
      type: String,
      index: true,
      required: true
    },
    //type Specific content goes here
    typeSpecific: {
      type: {
        isChild: {
          type: Boolean,
          index: true
        }
      }
    },
    created_at: {
      type: Date,
      default: Date.now
    },
    updated_at: {
      type: Date,
      default: Date.now,
      index: true
    },
    deleted_at: {
      type: Date,
      default: null
    },
    flag_language: String,
    searchIndex: {
      type: {
        en: String,
        de: String
      }
    },
    rating: {
      type: {
        upvotes: { type: Number },
        downvotes: { type: Number },
        sum: { type: Number }
      }
    },
    metrics: {
      type: {
        impressions: { type: Number, default: 0, index: true }
      }
    },
    sharing: [
      {
        type: String,
        required: true,
        ref: 'UserModel',
        index: true
      }
    ],
    tags: [
      {
        type: String,
        index: true
      }
    ]
  },
  { collection: 'content', toJSON: { virtuals: true }, toObject: { virtuals: true } }
);

ContentSchema.virtual('vUserInfo', {
  ref: 'UserModel', // The model to use
  localField: 'userId', // Find people where `localField`
  foreignField: '_id', // is equal to `foreignField`
  justOne: true
});
//get everything for the datasetowner
ContentSchema.virtual('vDataSetUserInfo', {
  ref: 'UserModel', // The model to use
  localField: 'dataSetOwnerId', // Find people where `localField`
  foreignField: '_id', // is equal to `foreignField`
  justOne: true
});
//get everything for the dataset
ContentSchema.virtual('vDataSet', {
  ref: 'Content', // The model to use
  localField: 'dataSetSlug', // Find people where `localField`
  foreignField: 'slug', // is equal to `foreignField`
  justOne: true,
  options: { match: { 'versioning.latest': true } }
});

ContentSchema.virtual('vPreviewTags', {
  ref: 'Tags', // The model to use
  localField: 'tags', // Find people where `localField`
  foreignField: 'slug', // is equal to `foreignField`
  // If `justOne` is true, 'members' will be a single doc as opposed to
  // an array. `justOne` is false by default.
  justOne: false,
  options: { match: { hasParent: false }, sort: { 'metrics.impressions': -1 }, limit: 2 } // Query options, see http://bit.ly/mongoose-query-options
});

ContentSchema.index({ name: 1 }, { collation: { locale: 'de', strength: 1 } });
//Indexes for faster search improvement 1 asc, -1 desc
//my visuals

ContentSchema.index({ userId: -1, deleted_at: 1, 'versioning.latest': -1, created_at: -1, 'typeSpecific.isChild': 1, type: 1 }, { name: 'myvisualscreatedidx' });
ContentSchema.index({ userId: -1, deleted_at: 1, 'versioning.latest': -1, updated_at: -1, 'typeSpecific.isChild': 1, type: 1 }, { name: 'myvisualsidx' });
ContentSchema.index({ userId: -1, deleted_at: 1, 'versioning.latest': -1, 'metrics.impressions': -1, 'typeSpecific.isChild': 1, type: 1 }, { name: 'myvisualsimpidx' });
//public visuals
ContentSchema.index({ access: -1, deleted_at: 1, 'versioning.latest': -1, updated_at: -1, 'typeSpecific.isChild': 1, type: 1 }, { name: 'publixvisualsidx' });
ContentSchema.index({ access: -1, deleted_at: 1, 'versioning.latest': -1, 'metrics.impressions': -1, 'typeSpecific.isChild': 1, type: 1 }, { name: 'publixvisualsimpidx' });
//from my data
ContentSchema.index({ access: -1, dataSetOwnerId: -1, deleted_at: 1, 'metrics.impressions': -1, 'versioning.latest': -1, 'typeSpecific.isChild': 1, userId: -1 }, { name: 'frommydataimpidx' });
ContentSchema.index({ access: -1, dataSetOwnerId: -1, deleted_at: 1, updated_at: -1, 'versioning.latest': -1, 'typeSpecific.isChild': 1, userId: -1 }, { name: 'frommydataidx' });

ContentSchema.pre('save', async function(next) {
  try {
    this._id = new mongoose.Types.ObjectId();
    this.slug = createHashSlug(this);
    next();
  } catch (error) {
    console.log('[ContentSchema] pre save error', error);
  }
});

export { ContentSchema };
